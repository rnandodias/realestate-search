name: Deploy to VPS (Hostinger)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload files to VPS via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "."
          target: "/opt/realestate-search"
          rm: true
          overwrite: true

      - name: Remote deploy (docker compose up)
        uses: appleboy/ssh-action@v1.0.3
        env:
          # ==== Secrets obrigatórios ====
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          EMBEDDING_MODEL: ${{ secrets.EMBEDDING_MODEL }}
          VECTOR_SIZE: ${{ secrets.VECTOR_SIZE }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          QDRANT_COLLECTION: ${{ secrets.QDRANT_COLLECTION }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          DB_NAME: ${{ secrets.DB_NAME }}
          COLLECTION_NAME: ${{ secrets.COLLECTION_NAME }}
          VECTOR_DB_URL: ${{ secrets.VECTOR_DB_URL }}
          SEARCH_API_KEY: ${{ secrets.SEARCH_API_KEY }}
          # ==== Opcional: evitar rate limit no Docker Hub ====
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd /opt/realestate-search

            # limpeza opcional de lixo do git
            rm -rf .git .github/.DS_Store || true

            # instala docker e compose se faltar
            if ! command -v docker >/dev/null 2>&1; then
              curl -fsSL https://get.docker.com | sh
            fi
            if ! docker compose version >/dev/null 2>&1; then
              apt-get update && apt-get install -y docker-compose-plugin || true
            fi

            # cria rede externa compartilhada (idempotente)
            docker network create svc_net || true

            # sanity check dos secrets
            required=(OPENAI_API_KEY EMBEDDING_MODEL VECTOR_SIZE QDRANT_URL QDRANT_COLLECTION MONGODB_URI DB_NAME COLLECTION_NAME VECTOR_DB_URL SEARCH_API_KEY)
            for v in "${required[@]}"; do
              if [ -z "${!v}" ]; then
                echo "[ERRO] Secret $v não definido no GitHub Actions." >&2
                exit 1
              fi
            done

            # gera .env com valores EXPANDIDOS
            cat > .env <<EOF
            OPENAI_API_KEY=${OPENAI_API_KEY}
            EMBEDDING_MODEL=${EMBEDDING_MODEL}
            VECTOR_SIZE=${VECTOR_SIZE}

            # Qdrant
            QDRANT_URL=${QDRANT_URL}
            QDRANT_COLLECTION=${QDRANT_COLLECTION}

            # MongoDB Atlas
            MONGODB_URI=${MONGODB_URI}
            DB_NAME=${DB_NAME}
            COLLECTION_NAME=${COLLECTION_NAME}

            # Acesso HTTP local ao Qdrant (para ETL)
            VECTOR_DB_URL=${VECTOR_DB_URL}

            # API key exigida nos endpoints protegidos (/search, /upsert)
            SEARCH_API_KEY=${SEARCH_API_KEY}
            EOF

            # login docker hub (opcional)
            if [ -n "${DOCKERHUB_USERNAME}" ] && [ -n "${DOCKERHUB_TOKEN}" ]; then
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin || true
            fi

            # sobe/atualiza os serviços
            docker compose up -d --build

            # garante que search-service e n8n possam falar via svc_net
            # (se o compose já declara networks: [svc_net], isso é desnecessário; manter por segurança)
            if docker ps --format '{{.Names}}' | grep -q '^search-service$'; then
              docker network connect svc_net search-service 2>/dev/null || true
            fi

            # status
            docker compose ps
            docker ps --format '{{.Names}} -> {{.Status}}'
